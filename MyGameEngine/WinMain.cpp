//インクルード
#include <Windows.h>
#include"Direct3D.h"
#include"Input.h"
#include"Camera.h"
#include"Transform.h"
#include"FBX.h"
#include"Stage.h"
#include"Controller.h"
#include"resource.h"

//エントリーポイント
//API アプリケーションプログラミングインターフェース
//    ->何らかのアプリケーションの便利機能をまとめたもの
//SDK ソフトウェアデベロップメントキット
//    ->ソフトウェアを開発するキット（APIを含む）

//定数宣言
const wchar_t* WIN_CLASS_NAME = L"SampleGame"; //ウィンドウクラス名
const wchar_t* APP_NAME = L"サンプルゲーム"; //アプリケーション名
const int WINDOW_WIDTH = 800;  //ウィンドウの幅
const int WINDOW_HEIGHT = 600; //ウィンドウの高さ

Stage* pStage = new Stage();

//プロトタイプ宣言
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
BOOL CALLBACK DialogProc(HWND hDlg, UINT msg, WPARAM wp, LPARAM lp);

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInst, LPSTR lpCmdLine, int nCmdShow)
{
	//ウィンドウクラス（設計図）を作成
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX);             //この構造体のサイズ
	wc.hInstance = hInstance;                   //インスタンスハンドル
	wc.lpszClassName = WIN_CLASS_NAME;            //ウィンドウクラス名
	wc.lpfnWndProc = WndProc;                   //ウィンドウプロシージャ
	wc.style = CS_VREDRAW | CS_HREDRAW;         //スタイル（デフォルト）
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION); //アイコン
	wc.hIconSm = LoadIcon(NULL, IDI_WINLOGO);   //小さいアイコン
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);   //マウスカーソル
	wc.lpszMenuName = MAKEINTRESOURCE(IDR_MENU1);                     //メニュー（なし）
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH); //背景（白）
	RegisterClassEx(&wc); //クラスを登録

	//ウィンドウサイズの計算(表示領域をWINDOW_WIDTH*WINDOW_HIGHTに指定するための計算)
	RECT winRect = { 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT };
	AdjustWindowRect(&winRect, WS_OVERLAPPEDWINDOW, FALSE);
	int winW = winRect.right - winRect.left;     //ウィンドウ幅
	int winH = winRect.bottom - winRect.top;     //ウィンドウ高さ

 //ウィンドウを作成

	HWND hWnd = CreateWindow(
		WIN_CLASS_NAME,         //ウィンドウクラス名
		APP_NAME,     //タイトルバーに表示する内容
		WS_OVERLAPPEDWINDOW, //スタイル（普通のウィンドウ）
		CW_USEDEFAULT,       //表示位置左（おまかせ）
		CW_USEDEFAULT,       //表示位置上（おまかせ）
		winW,                 //ウィンドウ幅
		winH,                 //ウィンドウ高さ
		NULL,                //親ウインドウ（なし）
		NULL,                //メニュー（なし）
		hInstance,           //インスタンス
		NULL                 //パラメータ（なし）
	);

 //ウィンドウを表示
	ShowWindow(hWnd, nCmdShow);

	HWND hDlg = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1),hWnd, (DLGPROC)DialogProc);

	//Direct3D初期化
	HRESULT hr = Direct3D::Initialize(winW, winH, hWnd);
	if (FAILED(hr)) {
		MessageBox(nullptr, L"Direct3Dの初期化に失敗しました", L"エラー", MB_OK);
		return 0;
	}

	//DirectInputの初期化
	Input::Initialize(hWnd);

	Camera::Initialize({ 0, 10, -10, 0 }, { 0, 0, 0, 0 });

	
	pStage->Initialize();

	Controller* pCon = new Controller();
	pCon->Initialize();

	if (FAILED(hr)) {
		MessageBox(nullptr, L"Quadの初期化に失敗しました", L"エラー", MB_OK);
		return E_FAIL;
	}

	//メッセージループ（何か起きるのを待つ）
	MSG msg;
	ZeroMemory(&msg, sizeof(msg));
	while (msg.message != WM_QUIT)
	{
		//メッセージあり
		if (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		//メッセージなし
		else
		{
			//入力情報の更新
			Input::Update();

			//カメラの更新
			Camera::Update();

			pCon->Update();

			pStage->Update();


			//ゲームの処理
			Direct3D::BeginDraw();

			if (Input::IsKeyDown(DIK_ESCAPE)) {
				static int cnt = 0;
				cnt++;
				if (cnt >= 3) {
					PostQuitMessage(0);
				}
			}


			pStage->Draw();

			//ここに自前の描画処理を追加していく

			//描画処理
			Direct3D::EndDraw();
		}
	}

	/*SAFE_DELETE(quad);*/
	/*SAFE_DELETE(dice);*/
	/*SAFE_DELETE(sprite);*/
	/*SAFE_DELETE(fbx);*/
	SAFE_DELETE(pCon);
	pStage->Release();
	Input::Release();
	Direct3D::Release();
	return 0;
}

//ウィンドウプロシージャ（何かあった時によばれる関数）
//UINT typedef 別名 unsigned 符号なし　int 
LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	return pStage->WndProc(hWnd, msg, wParam, lParam);
}

//ダイアログプロシージャ
BOOL CALLBACK DialogProc(HWND hDlg, UINT msg, WPARAM wp, LPARAM lp) {
	return pStage->DialogProc(hDlg, msg, wp, lp);
}